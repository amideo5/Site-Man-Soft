User Controller

Base URL: /api/users

1. Create a User
Endpoint: /api/users
Method: POST
Description: Creates a new user.

Request Body:
`json`
{
  "id": <Long>,            // (optional) ID of the user
  "name": <String>,        // Name of the user
  "email": <String>,       // Email address of the user
  "password": <String>,    // Password for the user
  "tenantId": <Long>,      // ID of the associated tenant
  "role": <String>,        // Role of the user (e.g., "Admin", "User")
  "createdAt": <String>,   // (optional) Timestamp of creation
  "updatedAt": <String>    // (optional) Timestamp of last update
}
Response:
Status Code: 201 Created
Body: Returns the created user.
`json`
{
  "id": <Long>,
  "name": <String>,
  "email": <String>,
  "tenantId": <Long>,
  "role": <String>,
  "createdAt": <String>,
  "updatedAt": <String>
}

2. Update a User
Endpoint: /api/users/{userId}
Method: PUT
Description: Updates the details of an existing user.

Path Parameter: userId (Long): The ID of the user to update.
Request Body:
`json`
{
  "name": <String>,        // Updated name of the user
  "email": <String>,       // Updated email address
  "password": <String>,    // (optional) Updated password
  "tenantId": <Long>,      // Updated tenant ID
  "role": <String>         // Updated role of the user
}
Response:
Status Code: 200 OK
Body: Returns the updated user.
`json`
{
  "id": <Long>,
  "name": <String>,
  "email": <String>,
  "tenantId": <Long>,
  "role": <String>,
  "createdAt": <String>,
  "updatedAt": <String>
}

3. Get a User by ID
Endpoint: /api/users/{userId}
Method: GET
Description: Retrieves details of a specific user by their ID.

Path Parameter: userId (Long): The ID of the user to retrieve.
Response:
Status Code: 200 OK
Body:
`json`
{
  "id": <Long>,
  "name": <String>,
  "email": <String>,
  "tenantId": <Long>,
  "role": <String>,
  "createdAt": <String>,
  "updatedAt": <String>
}
Status Code: 404 Not Found
Returns no body if the user is not found.

4. Get Users by Tenant
Endpoint: /api/users/tenant/{tenantId}
Method: GET
Description: Retrieves a list of users belonging to a specific tenant.

Path Parameter: tenantId (Long): The ID of the tenant.
Response:
Status Code: 200 OK
Body: Returns a list of users for the specified tenant.
`json`
[
  {
    "id": <Long>,
    "name": <String>,
    "email": <String>,
    "tenantId": <Long>,
    "role": <String>,
    "createdAt": <String>,
    "updatedAt": <String>
  },
  ...
]

5. Delete a User
Endpoint: /api/users/{userId}
Method: DELETE
Description: Deletes a specific user by their ID.

Path Parameter: userId (Long): The ID of the user to delete.
Response:
Status Code: 204 No Content